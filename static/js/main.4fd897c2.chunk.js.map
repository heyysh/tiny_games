{"version":3,"sources":["Games/CardFlip/style.tsx","Games/CardFlip/components/PlaygroundStyle.tsx","Games/CardFlip/components/CardStyle.tsx","Games/CardFlip/components/Card.tsx","Games/CardFlip/components/helpers.ts","Games/CardFlip/components/Playground.tsx","Games/CardFlip/components/SidebarStyle.tsx","Games/CardFlip/components/Timer.tsx","Games/CardFlip/components/Sidebar.tsx","Games/CardFlip/index.tsx","App.tsx","index.tsx"],"names":["Main","styled","div","Playground","CardContainer","props","isOpen","isMatch","CardBody","CardBasic","CardBack","CardFront","Card","idx","pauseInteraction","char","handleCardClick","onClick","getRandomPairCards","pairNum","randomCardIndices","i","currIndex","Math","floor","random","includes","map","item","String","fromCharCode","arrayShuffle","arr","length","j","timerFormatter","seconds","minute","second","isPlaying","setIsGameSet","useState","cardList","setCardList","openingCard","useRef","matchedCardCount","setMatchedCardCount","setPauseInteraction","isFlipFirstCard","current","isMatchFlip","handleCardOpen","prev","setTimeout","handleCardResult","prevItem","prevIdx","useEffect","preRenderCardList","push","initCardList","randomCards","getRandomPairCardList","itm","card","StartButton","button","RecordsContainer","Title","Record","li","RecordTimeout","Timer","timeLimit","isInterrupt","cb","timeCounter","setTimeCounter","isReachTimeLimit","counterId","setInterval","clearInterval","Sidebar","isGameSet","setIsPlaying","lastTenRecords","setLastTenRecords","timeConsuming","newRecords","time","pop","React","memo","CardFlip","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fd897c2.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Main = styled.div`\n  display: flex;\n`\n\nexport { Main };\n","import styled from 'styled-components';\n\nconst Playground = styled.div`\n  margin: 10px;\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n`\nexport { Playground };\n","import styled from 'styled-components';\n\ntype TCardStyleProps = {\n  isOpen: boolean;\n  isMatch: boolean;\n}\n\nconst CardContainer = styled.div<TCardStyleProps>`\n  width: 150px;\n  height: 175px;\n  margin: 5px;\n  perspective: 1000px;\n  cursor: ${props => (!props.isOpen || !props.isMatch) && 'pointer'};\n  & > div {\n    transform: ${props => (props.isOpen || props.isMatch) && 'rotateY(180deg)'};\n  }\n`\n\nconst CardBody = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  transition: transform 0.8s;\n  transform-style: preserve-3d;\n`;\n\nconst CardBasic = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: bold;\n  color: white;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n`;\n\nconst CardBack = styled(CardBasic)`\n  background-color: lightskyblue;\n  font-size: 84px;\n`;\n\nconst CardFront = styled(CardBasic)<TCardStyleProps>`\n  background-color: lightseagreen;\n  font-size: 72px;\n  transform: rotateY(180deg);\n  box-shadow: ${props => (props.isOpen && props.isMatch) ? 'inset 0px 0px 30px 15px #67ebe4' : 'none'};\n  transition: box-shadow 0.8s;\n`;\n\nexport { CardContainer, CardBody, CardBack, CardFront };\n","import * as CardStyle from './CardStyle';\n\ntype TCard = {\n  idx: number;\n  isOpen: boolean;\n  isMatch: boolean;\n  pauseInteraction: boolean;\n  char: string;\n  handleCardClick: (idx: number, char: string) => void;\n}\n\nconst Card = (props: TCard) => {\n  const { idx, isOpen, isMatch, pauseInteraction, char, handleCardClick } = props;\n\n  return (\n    <CardStyle.CardContainer isOpen={isOpen} isMatch={isMatch}>\n      <CardStyle.CardBody onClick={() => (!pauseInteraction && !isOpen && !isMatch) && handleCardClick(idx, char)}>\n        <CardStyle.CardBack>?</CardStyle.CardBack>\n        <CardStyle.CardFront isOpen={isOpen} isMatch={isMatch}>{char}</CardStyle.CardFront>\n      </CardStyle.CardBody>\n    </CardStyle.CardContainer>\n  );\n}\n\nexport default Card;\n","export const getRandomPairCardList = (pairNum: number): string[] => {\n  if (pairNum > 26) return [];\n  const randomCards = getRandomPairCards(pairNum);\n  const shuffledRandomCards = arrayShuffle(randomCards);\n  return shuffledRandomCards;\n}\n\nconst getRandomPairCards = (pairNum: number): string[] => {\n  if (pairNum > 26) return [];\n  let randomCardIndices: number[] = [];\n  for (let i = 0; i < pairNum; i++) {\n    let currIndex = Math.floor(Math.random() * 26);\n    while (randomCardIndices.includes(currIndex)) currIndex = Math.floor(Math.random() * 26);\n    randomCardIndices = [...randomCardIndices, currIndex, currIndex];\n  }\n  return randomCardIndices.map(item => String.fromCharCode(item + 65));\n}\n\nconst arrayShuffle = <T>(arr: T[]): T[] => {\n  let i = arr.length;\n  while (--i) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [arr[j], arr[i]] = [arr[i], arr[j]];\n  }\n  return arr;\n}\n\nexport const timerFormatter = (seconds: number): string => {\n  const minute = Math.floor(seconds / 60);\n  const second = seconds % 60;\n\n  return (\n    `${minute < 10 ? `0${minute}` : minute} : ${second < 10 ? `0${second}` : second}`\n  );\n}\n","import { useState, useEffect, useRef } from 'react';\nimport * as PlaygroundStyle from './PlaygroundStyle';\nimport Card from './Card';\nimport { getRandomPairCardList } from './helpers';\n\ntype TPlaygroundProps = {\n  isPlaying: boolean;\n  setIsGameSet: (isGameSet: boolean) => void;\n}\n\ntype TCardListState = {\n  char: string;\n  isOpen: boolean;\n  isMatch: boolean;\n}\n\nexport default function Playground(props: TPlaygroundProps): JSX.Element {\n  const { isPlaying, setIsGameSet } = props;\n  const pairNum = 9;\n  const [cardList, setCardList] = useState<TCardListState[]>([]);\n  const openingCard = useRef('');\n  const [matchedCardCount, setMatchedCardCount] = useState<number>(0);\n  const [pauseInteraction, setPauseInteraction] = useState<boolean>(false);\n\n  const handleCardClick = (idx: number, char: string): void => {\n    const isFlipFirstCard = openingCard.current === '';\n    const isMatchFlip = char === openingCard.current;\n    openingCard.current = openingCard.current ? '' : char;\n\n    handleCardOpen(idx, isMatchFlip);\n    if (isMatchFlip) setMatchedCardCount((prev)=>  prev + 1);\n    if (!isFlipFirstCard) {\n      setPauseInteraction(true);\n      setTimeout(() => {\n        !isFlipFirstCard && handleCardResult(idx);\n        setPauseInteraction(false);\n      }, 1000);\n    } \n  }\n  \n  const handleCardOpen = (idx: number, isMatchFlip: boolean): void => {\n    setCardList((prev) => {\n      return prev.map((prevItem, prevIdx) => {\n        if (idx !== prevIdx) {\n          if (!prevItem.isOpen) return prevItem;\n          return {...prevItem, isOpen: true, isMatch: isMatchFlip};\n        }\n        return {...prevItem, isOpen: true, isMatch: isMatchFlip};\n      });\n    })\n  }\n\n  const handleCardResult = (idx: number): void => {\n    setCardList((prev) => {\n      return prev.map((prevItem, prevIdx) => {\n        if (idx !== prevIdx) {\n          if (!prevItem.isOpen) return prevItem;\n          return {...prevItem, isOpen: false};\n        }\n        return {...prevItem, isOpen: false};\n      });\n    })\n  }\n\n  useEffect(() => {\n    const preRenderCardList: TCardListState[] = [];\n    for(let i = 0; i < pairNum * 2; i++) {\n      preRenderCardList.push({\n        char: 'Pre',\n        isOpen: false,\n        isMatch: false\n      });\n    }\n    setCardList(preRenderCardList);\n  }, []);\n\n  useEffect(() => {\n    if (isPlaying) {\n      const initCardList = getRandomPairCardList(pairNum).map((itm) => ({\n        char: itm,\n        isOpen: false,\n        isMatch: false\n      }));\n      setCardList(initCardList);\n      setMatchedCardCount(0);\n    }\n  }, [isPlaying]);\n\n  useEffect(()=> {\n    if(pairNum === matchedCardCount) setIsGameSet(true); \n  }, [setIsGameSet, matchedCardCount])\n\n  return (\n    <PlaygroundStyle.Playground>\n      {cardList.map((card, idx) =>\n        <Card\n          key={`${card.char}_${idx}`}\n          idx={idx}\n          isOpen={card.isOpen}\n          isMatch={card.isMatch}\n          pauseInteraction={!isPlaying || pauseInteraction}\n          char={card.char}\n          handleCardClick={handleCardClick}\n        />\n      )}\n    </PlaygroundStyle.Playground>\n  );\n}","import styled from 'styled-components';\n\ntype TSidebarStyleProps = {\n  isPlaying: boolean;\n}\n\n\nconst Main = styled.div`\n  margin: 10px;\n`\n\nconst StartButton = styled.button<TSidebarStyleProps>`\n  width: 200px;\n  height: 48px;\n  font-size: 24px;\n  margin: 5px;\n  cursor: pointer;\n  background-color: ${props => props.isPlaying ? '#009e95' : '#0c9df7'} ;\n  color: white;\n  border: 0px;\n  border-radius: 5px;\n`\n\nconst RecordsContainer = styled.div`\n  margin: 20px 5px 5px 5px;\n  font-size: 18px;\n  & > ul {\n    padding-left: 24px;\n    margin: 10px 0px;\n  }\n\n  & li {\n    margin: 5px 0px;\n  }\n`\n\nconst Title = styled.div`\n  font-size: 20px;\n  margin: 10px 0px;\n  font-weight: normal;\n`\n\nconst Record = styled.li`\n  color: #414141;\n`\n\nconst RecordTimeout = styled(Record)`\n  color: red;\n`\n\nexport { Main, StartButton, RecordsContainer, Title, Record, RecordTimeout };\n","import { useEffect, useState } from 'react';\nimport { timerFormatter } from './helpers';\n\ntype TTimerProps = {\n  timeLimit: number;\n  isInterrupt: boolean;\n  cb: (time: number, isReachTimeLimit: boolean) => void;\n}\n\nconst Timer = (props: TTimerProps) => {\n  const { timeLimit, isInterrupt, cb }= props;\n  const [timeCounter, setTimeCounter] = useState(0);\n\n  useEffect(() => {\n    const isReachTimeLimit = timeCounter > timeLimit;\n    if (isReachTimeLimit || isInterrupt) {\n      cb(timeCounter, isReachTimeLimit);\n    } else {\n      const counterId = setInterval(() => {\n        setTimeCounter(timeCounter + 1);\n      }, 1000);\n      return () => clearInterval(counterId);\n    }\n  }, [timeCounter, timeLimit, isInterrupt, cb])\n\n  return (\n    <>\n      {timerFormatter(timeCounter)}\n    </>\n  )\n}\n\nexport default Timer;\n","import React, { useState } from 'react';\nimport * as SidebarStyle from './SidebarStyle';\nimport Timer from './Timer';\nimport { timerFormatter } from './helpers';\n\ntype TSidebarProps = {\n  isPlaying: boolean;\n  setIsPlaying: (isPlaying: boolean) => void;\n  isGameSet: boolean;\n}\n\ntype TLastTenRecords = {\n  time: string;\n  isReachTimeLimit: boolean;\n}\n\nconst Sidebar = (props: TSidebarProps) => {\n  const { isPlaying, isGameSet, setIsPlaying } = props;\n  const [lastTenRecords, setLastTenRecords] = useState<TLastTenRecords[]>([]);\n\n  const handleStartPlaying = (): void => {\n    setIsPlaying(true);\n  }\n\n  const handleTimerResult = (timeConsuming: number, isReachTimeLimit: boolean): void => {\n    setLastTenRecords((prev) => {\n      const newRecords = [{\n        time: timerFormatter(timeConsuming),\n        isReachTimeLimit\n      }, ...prev];\n      if (newRecords.length > 10) newRecords.pop();\n      return newRecords;\n    });\n    setIsPlaying(false);\n  }\n\n  return (\n    <SidebarStyle.Main>\n      <SidebarStyle.StartButton\n        isPlaying={isPlaying}\n        onClick={() => !isPlaying && handleStartPlaying()}\n      >\n        {isPlaying\n          ? <Timer timeLimit={120} isInterrupt={isGameSet} cb={handleTimerResult} />\n          : 'START'\n        }\n      </SidebarStyle.StartButton>\n      <SidebarStyle.RecordsContainer>\n        <SidebarStyle.Title>Time limit: 2 mins</SidebarStyle.Title>\n        <SidebarStyle.Title>Last 10 records:</SidebarStyle.Title>\n        <ul>\n          {lastTenRecords.map((item, idx) => {\n            return item.isReachTimeLimit\n              ? <SidebarStyle.RecordTimeout key={`${item}_${idx}`}>Timeout</SidebarStyle.RecordTimeout>\n              : <SidebarStyle.Record key={`${item}_${idx}`}>{item.time}</SidebarStyle.Record>\n          })}\n        </ul>\n      </SidebarStyle.RecordsContainer> \n    </SidebarStyle.Main>\n  )\n}\n\nexport default React.memo(Sidebar);","import { useEffect, useState } from 'react';\nimport * as CardFlipStyle from './style';\nimport Playground from './components/Playground';\nimport Sidebar from './components/Sidebar';\n\nexport default function CardFlip(): JSX.Element {\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [isGameSet, setIsGameSet] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPlaying && isGameSet) setIsGameSet(false);\n  }, [isPlaying, isGameSet]);\n\n  return (\n    <CardFlipStyle.Main>\n      <Sidebar\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        isGameSet={isGameSet}\n      />\n      <Playground\n        isPlaying={isPlaying}\n        setIsGameSet={setIsGameSet}\n      />\n    </CardFlipStyle.Main>\n  );\n}","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport CardFlip from './Games/CardFlip';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\">\n          <CardFlip />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}